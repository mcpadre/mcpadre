name: CI/CD Pipeline

on:
  push:
    branches: ["**"]
    tags: ["v*"]
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  # Run tests on all platforms
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest # Linux x64
          - macos-latest # macOS ARM64 (M1 runners)
          - macos-13 # macOS x64 (Intel runners)
        node: [22]

    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v2
        with:
          version: 9

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: "pnpm"

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y bubblewrap

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build
        run: pnpm build

      - name: Run tests and checks
        run: pnpm typecheck && pnpm lint && pnpm test
        env:
          CI: true

      # Upload test results even if tests fail
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-node${{ matrix.node }}
          path: |
            coverage/
            test-results/
          retention-days: 7

  # Build ONCE on Linux - output is platform-agnostic JavaScript
  build-package:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v2
        with:
          version: 9

      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"

      - run: pnpm install --frozen-lockfile
      - run: pnpm build

      # Create npm package tarball
      - name: Pack npm package
        run: |
          cd packages/cli
          pnpm pack --pack-destination ./dist-artifacts

      - name: Upload package artifact
        uses: actions/upload-artifact@v4
        with:
          name: npm-package
          path: packages/cli/dist-artifacts/*.tgz
          retention-days: 30

  # Test the single package installs correctly on all platforms
  test-installation:
    needs: build-package
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - macos-13
        node: [22]

    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      - uses: actions/download-artifact@v4
        with:
          name: npm-package
          path: ./package

      - name: Test installation
        run: |
          # Install globally - npm will compile native deps for this platform
          npm install -g ./package/*.tgz

          # Verify installation
          mcpadre --version
          mcpadre --help

          # Test init command
          mkdir test-project
          cd test-project
          mcpadre init --host cursor --yes

          # Verify config was created
          test -f mcpadre.yaml

  # Publish to npm on semver tags
  publish:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [test, test-installation]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write # For npm provenance

    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v2
        with:
          version: 9

      - uses: actions/setup-node@v4
        with:
          node-version: 22
          registry-url: "https://registry.npmjs.org"
          cache: "pnpm"

      - name: Validate tag format
        id: validate-tag
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          echo "Tag: $TAG"

          # Extract version from tag (remove 'v' prefix)
          VERSION=${TAG#v}
          echo "Version: $VERSION"

          # Validate semver format using regex pattern
          if echo "$VERSION" | grep -qE '^(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)(-[a-zA-Z0-9][a-zA-Z0-9\.-]*)?(\+[a-zA-Z0-9][a-zA-Z0-9\.-]*)?$'; then
            echo "valid=true" >> $GITHUB_OUTPUT
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "tag=$TAG" >> $GITHUB_OUTPUT
          else
            echo "valid=false" >> $GITHUB_OUTPUT
            echo "❌ Tag $TAG does not contain a valid semver version"
            exit 1
          fi

      - name: Verify package.json version matches tag
        if: steps.validate-tag.outputs.valid == 'true'
        run: |
          cd packages/cli
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          TAG_VERSION="${{ steps.validate-tag.outputs.version }}"

          echo "Package version: $PACKAGE_VERSION"
          echo "Tag version: $TAG_VERSION"

          if [ "$PACKAGE_VERSION" != "$TAG_VERSION" ]; then
            echo "❌ Package version ($PACKAGE_VERSION) does not match tag version ($TAG_VERSION)"
            exit 1
          fi

          echo "✅ Package version matches tag version"

      - name: Install dependencies and build
        if: steps.validate-tag.outputs.valid == 'true'
        run: |
          pnpm install --frozen-lockfile
          pnpm build

      - name: Publish to npm
        if: steps.validate-tag.outputs.valid == 'true'
        run: |
          cd packages/cli

          # Publish with provenance
          npm publish --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Create release comment on PRs
  pr-comment:
    if: github.event_name == 'pull_request'
    needs: [test, test-installation]
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write

    steps:
      - uses: actions/download-artifact@v4
        with:
          name: npm-package
          path: ./package

      - name: Get package info
        id: package
        run: |
          TARBALL=$(ls ./package/*.tgz | head -1)
          SIZE=$(ls -lh "$TARBALL" | awk '{print $5}')
          NAME=$(basename "$TARBALL")

          echo "name=$NAME" >> $GITHUB_OUTPUT
          echo "size=$SIZE" >> $GITHUB_OUTPUT

      - uses: actions/github-script@v7
        with:
          script: |
            const body = `### 📦 Build Artifacts Ready

            **Package**: \`${{ steps.package.outputs.name }}\`
            **Size**: ${{ steps.package.outputs.size }}
            **Platforms**: Linux (x64/ARM64), macOS (x64/ARM64)
            **Node.js**: 22

            #### Test Installation

            \`\`\`bash
            # Download the artifact using GitHub CLI
            gh run download ${{ github.run_id }} -R ${{ github.repository }} -n npm-package

            # Install the tarball
            npm install -g mcpadre-*.tgz

            # Verify installation
            mcpadre --version
            \`\`\`

            **View in GitHub Actions**: [Run #${{ github.run_id }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

            Ready for release! 🚀
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
